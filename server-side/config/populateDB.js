const User = require("../model/schema");
const Passage = require("../model/Passage");
const Tag = require("../model/Tag");

const populateDatabase = async () => {
  try {
    const userCount = await User.countDocuments();
    const passageCount = await Passage.countDocuments();
    const tagCount = await Tag.countDocuments();

    // Criar usu√°rio inicial
    if (userCount === 0) {
      const newUser = new User({
        nome: "Admin",
        email: "admin@email.com",
        senha: "123456", // Ser√° criptografada automaticamente pelo pre-save hook
      });
      await newUser.save();
      console.log("‚úÖ Usu√°rio inicial criado!");
    } else {
      console.log("üîπ Usu√°rio j√° existe, pulando cria√ß√£o.");
    }

    // Criar tags iniciais
    let tagAmor, tagFe, tagEsperanca;
    if (tagCount === 0) {
      tagAmor = new Tag({ nome: "amor" });
      tagFe = new Tag({ nome: "f√©" });
      tagEsperanca = new Tag({ nome: "esperan√ßa" });

      await Tag.insertMany([tagAmor, tagFe, tagEsperanca]);
      console.log("‚úÖ Tags iniciais criadas!");
    } else {
      console.log("üîπ Tags j√° existem, pulando cria√ß√£o.");
      
      // Buscar tags existentes
      const tags = await Tag.find();
      tagAmor = tags.find((tag) => tag.nome === "amor");
      tagFe = tags.find((tag) => tag.nome === "f√©");
      tagEsperanca = tags.find((tag) => tag.nome === "esperan√ßa");
    }

    // Criar passagens e associar √†s tags
    if (passageCount === 0) {
      const passage1 = new Passage({
        trecho: "1JO 4:8",
        descricao: "1 Jo√£o 4:8",
        texto: "Aquele que n√£o ama n√£o conhece a Deus; porque Deus √© amor.",
        traducao: "Jo√£o Ferreira de Almeida",
        tags: tagAmor ? [tagAmor._id] : [],
      });

      const passage2 = new Passage({
        trecho: "HEB 11:1",
        descricao: "Hebreus 11:1",
        texto: "Ora, a f√© √© a certeza daquilo que esperamos e a prova das coisas que n√£o vemos.",
        traducao: "Jo√£o Ferreira de Almeida",
        tags: tagFe ? [tagFe._id] : [],
      });

      await Passage.insertMany([passage1, passage2]);
      console.log("‚úÖ Passagens iniciais criadas!");

      // üîó Associar passagens √†s tags
      if (tagAmor) {
        tagAmor.passagens.push(passage1._id);
        await tagAmor.save();
      }
      if (tagFe) {
        tagFe.passagens.push(passage2._id);
        await tagFe.save();
      }
    } else {
      console.log("üîπ Passagens j√° existem, pulando cria√ß√£o.");
    }
  } catch (error) {
    console.error("‚ùå Erro ao popular o banco de dados:", error);
  }
};

module.exports = populateDatabase;
